@page "/Oferty"
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime;
@using Platinum.ClientPanel.Controllers
@using Platinum.ClientPanel.Model
@using Platinum.Core.Model
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        @if (showMainPage)
        {
            <div class="container-fluid">
                <h1>Oferty</h1>
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-4">
                                <h4 class="m-md-2">Kategorie</h4>
                                <ul class="list-group">
                                    @if (areCatsAndOffersLoading)
                                    {
                                        <div class="spinner-border" role="status">
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        for (int i = 0; i < userCategoryList.Count; i++)
                                        {
                                            int index = i;
                                            <li class="list-group-item list-group-item-action" @onclick="() => ChangeCategory(userCategoryList.ElementAt(index).Id, userCategoryList.ElementAt(index).WebsiteCategoryId)">
                                                @userCategoryList.ElementAt(i).CategoryName
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                            <div class="col-8">

                                <div class="row justify-content-sm-between align-content-center align-items-center">
                                    <h4 class="m-md-2">Oferty</h4>
                                </div>

                                <div class="table-responsive max-viewport-height-75">
                                    @if (areCatStatsLoading)
                                    {
                                        <div class="spinner-border" role="status">
                                            <span class="sr-only">Loading...</span>
                                        </div>
                                    }
                                    else if (selectedCategory == 0)
                                    {
                                        <ul class="list-group">
                                            <li class="list-group-item list-group-item-action">
                                                Wybierz kategorie z listy
                                            </li>
                                        </ul>
                                    }
                                    else
                                    {
                                        <div class="table-responsive">
                                            <ul class="list-group">
                                                <li class="list-group-item list-group-item-action">
                                                    Kategoria: @selectedCategoryStats.webApiUserWebsiteCategory.CategoryName
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Plan: @selectedCategoryStats.PaidPlan.Name
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Pozostały limit ogółem: @selectedCategoryStats.OffersRemains
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Pozostały limit w tym miesiącu: @selectedCategoryStats.OffersRemainsThisMonth
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Zaimportowanych ofert: @selectedCategoryStats.IndexedDocumentThisMonth
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Zaimportowanych ofert w tym miesiącu: @selectedCategoryStats.IndexedDocumentCount
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Opłata za magazyn: @Math.Round(selectedCategoryStats.IncomeForStorageThisMonth, 2)
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Opłata za przetworzenie ofert: @Math.Round(selectedCategoryStats.IncomeForProceedOffersThisMonth, 2)

                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    Łączna opłata: @Math.Round(selectedCategoryStats.IncomeThisMonth, 2)
                                                </li>
                                                <li class="list-group-item list-group-item-action">
                                                    <div class="row container-fluid">
                                                        <button @onclick="ShowMappingView" class="btn btn-primary m-1">Zobacz dostępne mapowania</button>
                                                        <button class="btn btn-primary m-1">Eksport danych</button>
                                                    </div>
                                                </li>

                                            </ul>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (showPossibleMappings)
        {
            <div class="container-fluid">
                <h1>Mapowania</h1>
                <div class="card-body table-responsive max-viewport-height-75">
                    <div class="col-12">
                        <ul class="list-group">

                            @for (int i = 0; i < selectedCategoryStats.FoundMappings.Count; i++)
                            {
                                int index = i;
                                <li class="list-group-item list-group-item-action">
                                    @selectedCategoryStats.FoundMappings.ElementAt(i)
                                </li>
                            }

                        </ul>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code
{
    bool areCatsAndOffersLoading = true;
    bool areCatStatsLoading = true;
    List<WebApiUserWebsiteCategory> userCategoryList = new List<WebApiUserWebsiteCategory>();
    OffersSelectedCategoryStats selectedCategoryStats;
    List<OfferDetails> loadedOffers = new List<OfferDetails>();
    int userId = 0;
    int selectedCategory = 0;
    bool showPossibleMappings = false;
    bool showMainPage = true;
    bool showDataExport = false;

    protected override void OnInitialized()
    {
        if (!AuthController.IsUserAuthenticated(AuthenticationStateProvider))
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            userId = AuthController.GetAuthenticatedUserId(AuthenticationStateProvider);
        }
    }

    protected override Task OnInitializedAsync()
    {
        return Task.Run(() =>
        {
            userCategoryList = WebApiUserWebsiteCategory.GetAllUserCategories(AuthController.GetAuthenticatedUserId(AuthenticationStateProvider)).ToList();
            areCatsAndOffersLoading = false;
            areCatStatsLoading = false;
        });
    }

    public Task ChangeCategory(int webApiUserCategoryId, int catId)
    {
        areCatStatsLoading = true;
        loadedOffers = new List<OfferDetails>();
        return Task.Run(() =>
        {
            selectedCategory = catId;
            selectedCategoryStats = new OffersSelectedCategoryStats(catId, userId, webApiUserCategoryId);
            areCatStatsLoading = false;
        });
    }

    public void ShowMappingView()
    {
        showMainPage = false;
        showPossibleMappings = true;
        showDataExport = false;
    }

}