@page "/"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Platinum.ClientPanel.Controllers
@using Platinum.Core.Finances
@using System.Collections.Concurrent
@using Platinum.Core.Model
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <h1>Przegląd</h1>
        <div class="card">
            <div class="card-header">
                Moje usługi
            </div>
            <div class="card-body">
                @if (areOffersLoaded)
                {
                    <div  class="table-responsive">
                        <table class="table">
                            <thead>
                            <th>Kategoria</th>
                            <th>Plan</th>
                            <th>Ofert w miesiącu</th>
                            <th>Wszystkich ofert</th>
                            <th>Należność</th>
                            </thead>
                            <tbody>
                            @for (int i = 0; i < userServiceLists.Count; i++)
                            {
                                <tr>
                                    <td>@userServiceLists.ElementAt(i).Category</td>
                                    <td>@userServiceLists.ElementAt(i).PaidPlanName</td>
                                    <td>@userServiceLists.ElementAt(i).ProcessedOffersMonth</td>
                                    <td>@userServiceLists.ElementAt(i).ProcessedOffersAllTime</td>
                                    <td>@Math.Round(userServiceLists.ElementAt(i).Income, 2)</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                        </div>
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h1>Brak uprawnień</h1>

        Wymagane jest zalogowanie aby uzyskac dostęp do panelu
    </NotAuthorized>
</AuthorizeView>

@code
{
    ConcurrentBag<UserServiceList> userServiceLists = new ConcurrentBag<UserServiceList>();
    bool areOffersLoaded = false;
    
    protected override Task OnInitializedAsync()
    {
        return Task.Run(LoadServiceList); 
    }


    private void LoadServiceList()
    {
        if (AuthController.IsUserAuthenticated(AuthenticationStateProvider))
        {
            int userId = AuthController.GetAuthenticatedUserId(AuthenticationStateProvider);
            UserServicesController.GetUserServicePanelData(userId).ContinueWith((e) => { userServiceLists = new ConcurrentBag<UserServiceList>(e.Result); });
            areOffersLoaded = true;
        }
    }
}