@page "/fetchdata"

@using Platinum.AdminPanel.Data
@using Platinum.AdminPanel.Model
@using Nest
@inject WeatherForecastService ForecastService

<h1>Fetching details</h1>
<div class="row m-b10">
</div>
<div hidden="@ContainerViewHidden" class="container-fluid">
    <button class="btn btn-primary m-lr5" @onclick="LoadUserListView">Back</button>
    <button class="btn btn-primary m-lr5" @onclick="RefreshAzureContainers">Refresh</button>

    <h3 class="m-t20">Containers</h3>
    <table class="table table-hover">
        <thead>
        <tr>
            <th>Container name</th>
            <th>Container type</th>
            <th>Container status</th>
        </tr>
        </thead>
        <tbody>
        @foreach (AzureContainerRow row in azureContainerRows)
        {
            <tr class="pointer-cursor">
                <td>@row.ContainerName</td>
                <td>@row.ContainerType</td>
                <td> @row.ContainerStatus</td>
            </tr>
        }
        </tbody>
    </table>
    <h3 class="m-t20">Offers stats</h3>

    <table class="table table-hover">
        <thead>
        <tr>
            <th>Category Id</th>
            <th>Category Name</th>
            <th>Processed offers(SQL)</th>
            <th>Not processed offers(SQL)</th>
            <th>Processed offers(Elastic)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (FetchingProcessedOffersRow row in offersCountRows)
        {
            <tr class="pointer-cursor">
                <td>@row.CategoryId</td>
                <td>@row.CategoryName</td>
                <td>@row.ProcessedOffers</td>
                <td>@row.NotProcessedOffersSql</td>
                <td>@row.ProcessedOffersElastic</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div hidden="@UserListHidden" class="container-fluid">
    <button class="btn btn-primary m-lr5" @onclick="RefreshRows">Refresh</button>
    <table class="table table-hover">
        <thead>
        <tr>
            <th>User</th>
            <th>In process Tasks</th>
            <th>Waiting Tasks</th>
        </tr>
        </thead>
        <tbody>
        @foreach (FetchingRow row in rows)
        {
            <tr class="pointer-cursor" @onclick="() => { LoadContainerView(row.RowId); }">
                <td>@row.DisplayName</td>
                <td>@row.InProcessTasks</td>
                <td> @row.WaitingTasks</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    FetchDataController fdc = new FetchDataController();
    AzureController azureController = new AzureController();
    List<FetchingRow> rows = new List<FetchingRow>();
    List<AzureContainerRow> azureContainerRows = new List<AzureContainerRow>();
    List<FetchingProcessedOffersRow> offersCountRows = new List<FetchingProcessedOffersRow>();
    List<bool> isIdRowVisible = new List<bool>();
    bool UserListHidden = false;
    bool ContainerViewHidden = true;
    int loadedContainerViewRowId = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RefreshRows();
        azureController.LoginToAzure();
    }

    private void RefreshRows()
    {
        rows = fdc.GetRows();
        isIdRowVisible.ForEach(x => x = false);
        isIdRowVisible = new List<bool>();
        foreach (var row in rows)
            isIdRowVisible.Add(true);
    }

    private void LoadContainerView(int rowId)
    {
        InvokeAsync(() =>
        {
            offersCountRows = new List<FetchingProcessedOffersRow>();
            loadedContainerViewRowId = rowId;
            UserListHidden = true;
            ContainerViewHidden = false;
            FetchingRow row = rows.First(x => x.RowId == rowId);
            azureContainerRows = azureController.GetUserContainers(row.UserId).ToList();
            offersCountRows = fdc.GetOffers(row.UserId);
        });
    }

    private void LoadUserListView()
    {
        UserListHidden = false;
        ContainerViewHidden = true;
    }

    private void RefreshAzureContainers()
    {
        FetchingRow row = rows.First(x => x.RowId == loadedContainerViewRowId);
        azureContainerRows = azureController.GetUserContainers(row.UserId).ToList();
        offersCountRows = fdc.GetOffers(row.UserId);
    }

}